diff -Nur nova/api/openstack/compute/contrib/hypervisors.py nova_mod/api/openstack/compute/contrib/hypervisors.py
--- nova/api/openstack/compute/contrib/hypervisors.py	2014-04-17 15:17:42.000000000 +0530
+++ nova_mod/api/openstack/compute/contrib/hypervisors.py	2014-05-21 15:18:59.502222364 +0530
@@ -46,8 +46,10 @@
         elem.set('running_vms')
         elem.set('cpu_info')
         elem.set('disk_available_least')
+	####NovaPatchStart
         elem.set('host_ip')
-
+	elem.set('data_ip')
+	####NovaPatchEnd
         service = xmlutil.SubTemplateElement(elem, 'service',
                                              selector='service')
         service.set('id')
@@ -119,7 +121,10 @@
         root.set('current_workload')
         root.set('running_vms')
         root.set('disk_available_least')
-
+	####NovaPatchStart
+	root.set('host_ip')
+        root.set('data_ip')
+	####NovaPatchEnd
         return xmlutil.MasterTemplate(root, 1)
 
 
@@ -135,14 +140,25 @@
         hyp_dict = {
             'id': hypervisor['id'],
             'hypervisor_hostname': hypervisor['hypervisor_hostname'],
+	    ######NovaPatchStart
+	    'host_ip': hypervisor['host_ip'],
+            'data_ip' : hypervisor['data_ip'],
+	    #####NovaPatchEnd
             }
 
         if detail and not servers:
-            fields = ('vcpus', 'memory_mb', 'local_gb', 'vcpus_used',
+	    #######NovaPatchStart
+            #fields = ('vcpus', 'memory_mb', 'local_gb', 'vcpus_used',
+            #          'memory_mb_used', 'local_gb_used',
+            #          'hypervisor_type', 'hypervisor_version',
+            #          'free_ram_mb', 'free_disk_gb', 'current_workload',
+            #          'running_vms', 'cpu_info', 'disk_available_least')
+	    fields = ('vcpus', 'memory_mb', 'local_gb', 'vcpus_used',
                       'memory_mb_used', 'local_gb_used',
                       'hypervisor_type', 'hypervisor_version',
                       'free_ram_mb', 'free_disk_gb', 'current_workload',
-                      'running_vms', 'cpu_info', 'disk_available_least')
+                      'running_vms', 'cpu_info', 'disk_available_least', 'host_ip', 'data_ip')
+	    #######NovaPathEnd
             ext_loaded = self.ext_mgr.is_loaded('os-extended-hypervisors')
             if ext_loaded:
                 fields += ('host_ip',)
diff -Nur nova/compute/resource_tracker.py nova_mod/compute/resource_tracker.py
--- nova/compute/resource_tracker.py	2014-04-17 15:17:42.000000000 +0530
+++ nova_mod/compute/resource_tracker.py	2014-05-21 15:18:59.466222365 +0530
@@ -40,6 +40,9 @@
 from nova.pci import pci_manager
 from nova import rpc
 from nova import utils
+########NovaPatchStart
+import netifaces
+#######NovaPatchEnd
 
 resource_tracker_opts = [
     cfg.IntOpt('reserved_host_disk_mb', default=0,
@@ -59,6 +62,18 @@
 
 CONF.import_opt('my_ip', 'nova.netconf')
 
+#####NovaPatchStart
+crd_nova_inter = [
+    cfg.StrOpt('management',default="localhost"),
+    cfg.StrOpt('data',default="localhost"),
+   ]
+
+CONF.register_opts(crd_nova_inter, "INTERFACES")
+my_ip = netifaces.ifaddresses(CONF.INTERFACES.management)[2][0]['addr']
+data_ip = netifaces.ifaddresses(CONF.INTERFACES.data)[2][0]['addr']
+#####NovaPatchEnd
+
+
 
 class ResourceTracker(object):
     """Compute helper class for keeping track of resource usage as instances
@@ -298,7 +313,11 @@
                  "'get_available_resource'  Compute tracking is disabled."))
             self.compute_node = None
             return
-        resources['host_ip'] = CONF.my_ip
+	#######NovaPatchStart
+        #resources['host_ip'] = CONF.my_ip
+	resources['host_ip'] = my_ip
+        resources['data_ip'] = data_ip
+	#######NovaPatchEnd
 
         self._verify_resources(resources)
 
diff -Nur nova/db/sqlalchemy/api.py nova_mod/db/sqlalchemy/api.py
--- nova/db/sqlalchemy/api.py	2014-04-17 15:17:52.000000000 +0530
+++ nova_mod/db/sqlalchemy/api.py	2014-05-21 15:19:38.266220922 +0530
@@ -682,13 +682,22 @@
                          func.sum(models.ComputeNode.current_workload),
                          func.sum(models.ComputeNode.running_vms),
                          func.sum(models.ComputeNode.disk_available_least),
+			 #####NovaPatchStart
+			 func.sum(models.ComputeNode.host_ip),
+                         func.sum(models.ComputeNode.data_ip),
+			 #####NovaPatchEnd
                          base_model=models.ComputeNode,
                          read_deleted="no").first()
 
     # Build a dict of the info--making no assumptions about result
+    #####NovaPatchStart
+    #fields = ('count', 'vcpus', 'memory_mb', 'local_gb', 'vcpus_used',
+    #          'memory_mb_used', 'local_gb_used', 'free_ram_mb', 'free_disk_gb',
+    #          'current_workload', 'running_vms', 'disk_available_least')
     fields = ('count', 'vcpus', 'memory_mb', 'local_gb', 'vcpus_used',
               'memory_mb_used', 'local_gb_used', 'free_ram_mb', 'free_disk_gb',
-              'current_workload', 'running_vms', 'disk_available_least')
+              'current_workload', 'running_vms', 'disk_available_least', 'host_ip', 'data_ip')
+    #####NovaPatchEnd
     return dict((field, int(result[idx] or 0))
                 for idx, field in enumerate(fields))
 
diff -Nur nova/db/sqlalchemy/models.py nova_mod/db/sqlalchemy/models.py
--- nova/db/sqlalchemy/models.py	2014-04-17 15:17:52.000000000 +0530
+++ nova_mod/db/sqlalchemy/models.py	2014-05-21 15:18:59.518222364 +0530
@@ -119,7 +119,10 @@
     host_ip = Column(types.IPAddress())
     supported_instances = Column(Text)
     metrics = Column(Text)
-
+    #####NovaPatchStart
+    host_ip = Column(String(15))
+    data_ip = Column(String(15))
+    #####NovaPatchEnd
     # Note(yongli): json string PCI Stats
     # '{"vendor_id":"8086", "product_id":"1234", "count":3 }'
     pci_stats = Column(Text)
diff -Nur nova/scheduler/host_manager.py nova_mod/scheduler/host_manager.py
--- nova/scheduler/host_manager.py	2014-04-17 15:17:52.000000000 +0530
+++ nova_mod/scheduler/host_manager.py	2014-05-21 15:18:59.482222365 +0530
@@ -134,6 +134,9 @@
 
         # Other information
         self.host_ip = None
+	######NovaPatchStart
+	self.data_ip = None
+	#####NovaPatchEnd
         self.hypervisor_type = None
         self.hypervisor_version = None
         self.hypervisor_hostname = None
@@ -214,6 +217,9 @@
 
         # All virt drivers report host_ip
         self.host_ip = compute['host_ip']
+	####NovaPatchStart
+	self.data_ip = compute['data_ip']
+	###NovaPatchEnd
         self.hypervisor_type = compute.get('hypervisor_type')
         self.hypervisor_version = compute.get('hypervisor_version')
         self.hypervisor_hostname = compute.get('hypervisor_hostname')
diff -Nur nova/virt/libvirt/config.py nova_mod/virt/libvirt/config.py
--- nova/virt/libvirt/config.py	2014-04-17 15:17:43.000000000 +0530
+++ nova_mod/virt/libvirt/config.py	2014-05-21 15:18:59.434222367 +0530
@@ -1075,6 +1075,40 @@
         super(LibvirtConfigGuestSerial, self).__init__(root_name="serial",
                                                        **kwargs)
 
+#########NovaPatchStart
+class LibvirtConfigGuestSerialController(LibvirtConfigGuestDevice):
+
+    def __init__(self, **kwargs):
+        super(LibvirtConfigGuestSerialController, self).__init__(root_name="controller",
+                                                         **kwargs)
+
+        self.type = "virtio-serial"
+        self.index = "0"
+
+    def format_dom(self):
+        dev = super(LibvirtConfigGuestSerialController, self).format_dom()
+
+        dev.set("type", self.type)
+        dev.set("index", self.index)
+        return dev
+
+class LibvirtConfigGuestSerialChannel(LibvirtConfigGuestDevice):
+
+    def __init__(self, **kwargs):
+        super(LibvirtConfigGuestSerialChannel, self).__init__(root_name="channel",
+                                                         **kwargs)
+
+        self.type = "mount"
+
+    def format_dom(self):
+        dev = super(LibvirtConfigGuestSerialChannel, self).format_dom()
+
+        dev.set("type", self.type)
+        dev.append(etree.Element("source", path=self.source_path, mode=self.source_mode ))
+        dev.append(etree.Element("target", name=self.target_name, type=self.target_type ))
+
+        return dev
+###NovaPatchEnd
 
 class LibvirtConfigGuestConsole(LibvirtConfigGuestChar):
 
diff -Nur nova/virt/libvirt/driver.py nova_mod/virt/libvirt/driver.py
--- nova/virt/libvirt/driver.py	2014-04-17 15:59:41.000000000 +0530
+++ nova_mod/virt/libvirt/driver.py	2014-05-21 16:13:37.982100426 +0530
@@ -105,7 +105,9 @@
 from nova.virt import watchdog_actions
 from nova import volume
 from nova.volume import encryptors
-
+######NovaPatchStart
+import netifaces
+######NovaPatchEnd
 native_threading = patcher.original("threading")
 native_Queue = patcher.original("Queue")
 
@@ -270,6 +272,18 @@
 CONF.import_opt('vif_plugging_is_fatal', 'nova.virt.driver')
 CONF.import_opt('vif_plugging_timeout', 'nova.virt.driver')
 
+######NovaPatchStart
+crd_nova_inter = [
+    cfg.StrOpt('management',default="localhost"),
+    cfg.StrOpt('data',default="localhost"),
+    ]
+
+CONF.register_opts(crd_nova_inter, "INTERFACES")
+my_ip = netifaces.ifaddresses(CONF.INTERFACES.management)[2][0]['addr']
+data_ip = netifaces.ifaddresses(CONF.INTERFACES.data)[2][0]['addr']
+#####NovaPatchEnd
+
+
 DEFAULT_FIREWALL_DRIVER = "%s.%s" % (
     libvirt_firewall.__name__,
     libvirt_firewall.IptablesFirewallDriver.__name__)
@@ -2558,6 +2572,12 @@
 
         # ensure directories exist and are writable
         fileutils.ensure_tree(libvirt_utils.get_instance_path(instance))
+	
+	#####NovaPatchStart
+        libvirt_utils.chown(libvirt_utils.get_instance_path(instance), 'root')
+        utils.execute('chmod', '777', libvirt_utils.get_instance_path(instance), run_as_root=True)
+        ####NovaPatchEnd	
+
 
         LOG.info(_('Creating image'), instance=instance)
 
@@ -3402,7 +3422,21 @@
                 guest.add_device(bark)
             else:
                 raise exception.InvalidWatchdogAction(action=watchdog_action)
-
+	
+	###########NovaPatchStart
+	controller = vconfig.LibvirtConfigGuestSerialController()
+        guest.add_device(controller)
+        ##For channel   
+        channel = vconfig.LibvirtConfigGuestSerialChannel()
+        channel.type = "unix"
+        channel.source_mode = "bind"
+        instance_dir = libvirt_utils.get_instance_path(instance)
+        channel.source_path = os.path.join(instance_dir,
+                                              "port")
+        channel.target_type = "virtio"
+        channel.target_name = "ns_port"
+        guest.add_device(channel)
+	##########NovaPatchEnd
         return guest
 
     def to_xml(self, context, instance, network_info, disk_info,
@@ -5257,7 +5291,10 @@
 
         data['pci_passthrough_devices'] = \
             self.driver.get_pci_passthrough_devices()
-
+	####NovaPatchStart
+	data['host_ip'] = my_ip 
+        data['data_ip'] = data_ip
+	####NovaPatchEnd
         self._stats = data
 
         return data
